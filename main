// Universidad del Valle de Guatemala
// B3023 Digital 2
// Emilio Soria, 221170
// Laboratorio 7
// Micro: ESP32 DEV Kit
// Uso de la comunicación serial UART

//**************************************************/
// Importación de librerías
//**************************************************/
#include <Arduino.h>

//**************************************************/
// Definiciones
//**************************************************/
#define LED1 18
#define LED2 21
#define LED3 22

#define Pot 36

//**************************************************/
// Variables globales
//**************************************************/
uint8_t menu_option;
String LED_time;

//**************************************************/
// Prototipos de función
//**************************************************/
void encender_LED(uint8_t, uint16_t);

//**************************************************/
// Función de configuración
//**************************************************/
void setup() {

  Serial.begin(115200);
  
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);

  digitalWrite(LED1, LOW);
  digitalWrite(LED3, LOW);
  digitalWrite(LED2, LOW);

}

//**************************************************/
// Loop principal
//**************************************************/
void loop() {
  
  Serial.println("\n1. LECTURA ADC");
  Serial.println("2. Controlar LEDs");
  Serial.print("Ingrese el número de opción: ");

  while (Serial.available() == 0) {
    // Esperar input
  }

  if (Serial.available()) {

    menu_option = Serial.read() - 48;

    if (menu_option == 1) {
      float lectura_pot = analogReadMilliVolts(Pot);
      Serial.println("\nLectura del potenciómetro: ");
      Serial.printf("%f mV\n", lectura_pot/1000);

    }
    
    else if (menu_option == 2) {
      Serial.println("\n\nIngrese el número de LED a encender (1-3) y el tiempo de encendido en milisegundos. Separe los valores por coma.");
      
      while (Serial.available() == 0) {
      // Esperar input
      }
      
      if (Serial.available()) {

        delay(5000);

        LED_time  = Serial.readStringUntil('\n');
        
        int delimiterIndex = LED_time.indexOf(',');
        
        // Check if the delimiter exists
        if (delimiterIndex != -1) {
          // Extract the two substrings
          String LED = LED_time.substring(0, delimiterIndex);
          String time = LED_time.substring(delimiterIndex + 1);

          int LED_int = LED.toInt();
          int time_int = time.toInt();

          encender_LED(LED_int, time_int);

        }
        else {
          Serial.println("Formato inválido.");
        }

      }

    } 
    
    else {
      Serial.println("\nOpción inválida.");
    }
  }
  
}

//**************************************************/
// Definición de funciones
//**************************************************/
void encender_LED(uint8_t LED_number, uint16_t tiempo_ms) {
  
  int selectedPin = 0;
  
  // Seleccionar el pin correspondiente al número de LED
  switch (LED_number) {
    case 1:
      selectedPin = LED1;
      break;
    case 2:
      selectedPin = LED2;
      break;
    case 3:
      selectedPin = LED3;
      break;
    default:
      Serial.println("LED no válido. Use 1, 2 o 3.");
      return;
  }

  digitalWrite(selectedPin, HIGH);
  Serial.printf("LED %d encendido %ds\n", LED_number, tiempo_ms/1000);

  delay(tiempo_ms);
  digitalWrite(selectedPin, LOW);
  Serial.printf("LED %d apagado\n", LED_number);

}
